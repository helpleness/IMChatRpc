/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: IMChat.proto


/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';
import {proto} from './IMChat_pb.js';

// 使用 const 声明全局变量
const grpc = { web: grpcWeb };

// const grpc = {};
// grpc.web = require('grpc-web');
//
// const proto = {};
// proto.chat = require('./IMChat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.SendMessageRequest,
 *   !proto.chat.SendMessageResponse>}
 */
const methodDescriptor_ChatService_SendMessage = new grpc.web.MethodDescriptor(
  '/chat.ChatService/SendMessage',
  grpc.web.MethodType.UNARY,
  proto.chat.SendMessageRequest,
  proto.chat.SendMessageResponse,
  /**
   * @param {!proto.chat.SendMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.SendMessageResponse.deserializeBinary
);


/**
 * @param {!proto.chat.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.SendMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.SendMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage,
      callback);
};


/**
 * @param {!proto.chat.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.SendMessageResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.MessageStreamRequest,
 *   !proto.chat.MyMessage>}
 */
const methodDescriptor_ChatService_ReceiveMessageStream = new grpc.web.MethodDescriptor(
  '/chat.ChatService/ReceiveMessageStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.chat.MessageStreamRequest,
  proto.chat.MyMessage,
  /**
   * @param {!proto.chat.MessageStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.MyMessage.deserializeBinary
);


/**
 * @param {!proto.chat.MessageStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chat.MyMessage>}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.receiveMessageStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chat.ChatService/ReceiveMessageStream',
      request,
      metadata || {},
      methodDescriptor_ChatService_ReceiveMessageStream);
};


/**
 * @param {!proto.chat.MessageStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chat.MyMessage>}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServicePromiseClient.prototype.receiveMessageStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chat.ChatService/ReceiveMessageStream',
      request,
      metadata || {},
      methodDescriptor_ChatService_ReceiveMessageStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.SendFriendRequest,
 *   !proto.chat.SendFriendResponse>}
 */
const methodDescriptor_ChatService_SendFriendApplication = new grpc.web.MethodDescriptor(
  '/chat.ChatService/SendFriendApplication',
  grpc.web.MethodType.UNARY,
  proto.chat.SendFriendRequest,
  proto.chat.SendFriendResponse,
  /**
   * @param {!proto.chat.SendFriendRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.SendFriendResponse.deserializeBinary
);


/**
 * @param {!proto.chat.SendFriendRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.SendFriendResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.SendFriendResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.sendFriendApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/SendFriendApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendFriendApplication,
      callback);
};


/**
 * @param {!proto.chat.SendFriendRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.SendFriendResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.sendFriendApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/SendFriendApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendFriendApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.HandleFriendRequest,
 *   !proto.chat.HandleFriendRequestResponse>}
 */
const methodDescriptor_ChatService_HandleFriendApplication = new grpc.web.MethodDescriptor(
  '/chat.ChatService/HandleFriendApplication',
  grpc.web.MethodType.UNARY,
  proto.chat.HandleFriendRequest,
  proto.chat.HandleFriendRequestResponse,
  /**
   * @param {!proto.chat.HandleFriendRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.HandleFriendRequestResponse.deserializeBinary
);


/**
 * @param {!proto.chat.HandleFriendRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.HandleFriendRequestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.HandleFriendRequestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.handleFriendApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/HandleFriendApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_HandleFriendApplication,
      callback);
};


/**
 * @param {!proto.chat.HandleFriendRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.HandleFriendRequestResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.handleFriendApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/HandleFriendApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_HandleFriendApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.ListFriendsRequest,
 *   !proto.chat.ListFriendsResponse>}
 */
const methodDescriptor_ChatService_ListFriends = new grpc.web.MethodDescriptor(
  '/chat.ChatService/ListFriends',
  grpc.web.MethodType.UNARY,
  proto.chat.ListFriendsRequest,
  proto.chat.ListFriendsResponse,
  /**
   * @param {!proto.chat.ListFriendsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.ListFriendsResponse.deserializeBinary
);


/**
 * @param {!proto.chat.ListFriendsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.ListFriendsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ListFriendsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.listFriends =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/ListFriends',
      request,
      metadata || {},
      methodDescriptor_ChatService_ListFriends,
      callback);
};


/**
 * @param {!proto.chat.ListFriendsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.ListFriendsResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.listFriends =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/ListFriends',
      request,
      metadata || {},
      methodDescriptor_ChatService_ListFriends);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.ListFriendRequestsRequest,
 *   !proto.chat.ListFriendRequestsResponse>}
 */
const methodDescriptor_ChatService_ListFriendRequests = new grpc.web.MethodDescriptor(
  '/chat.ChatService/ListFriendRequests',
  grpc.web.MethodType.UNARY,
  proto.chat.ListFriendRequestsRequest,
  proto.chat.ListFriendRequestsResponse,
  /**
   * @param {!proto.chat.ListFriendRequestsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.ListFriendRequestsResponse.deserializeBinary
);


/**
 * @param {!proto.chat.ListFriendRequestsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.ListFriendRequestsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.ListFriendRequestsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.listFriendRequests =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/ListFriendRequests',
      request,
      metadata || {},
      methodDescriptor_ChatService_ListFriendRequests,
      callback);
};


/**
 * @param {!proto.chat.ListFriendRequestsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.ListFriendRequestsResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.listFriendRequests =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/ListFriendRequests',
      request,
      metadata || {},
      methodDescriptor_ChatService_ListFriendRequests);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.SendGroupJoinRequest,
 *   !proto.chat.SendGroupJoinResponse>}
 */
const methodDescriptor_ChatService_SendGroupJoinApplication = new grpc.web.MethodDescriptor(
  '/chat.ChatService/SendGroupJoinApplication',
  grpc.web.MethodType.UNARY,
  proto.chat.SendGroupJoinRequest,
  proto.chat.SendGroupJoinResponse,
  /**
   * @param {!proto.chat.SendGroupJoinRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.SendGroupJoinResponse.deserializeBinary
);


/**
 * @param {!proto.chat.SendGroupJoinRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.SendGroupJoinResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.SendGroupJoinResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.sendGroupJoinApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/SendGroupJoinApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendGroupJoinApplication,
      callback);
};


/**
 * @param {!proto.chat.SendGroupJoinRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.SendGroupJoinResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.sendGroupJoinApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/SendGroupJoinApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendGroupJoinApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.HandleGroupJoinRequest,
 *   !proto.chat.HandleGroupJoinResponse>}
 */
const methodDescriptor_ChatService_HandleGroupJoinApplication = new grpc.web.MethodDescriptor(
  '/chat.ChatService/HandleGroupJoinApplication',
  grpc.web.MethodType.UNARY,
  proto.chat.HandleGroupJoinRequest,
  proto.chat.HandleGroupJoinResponse,
  /**
   * @param {!proto.chat.HandleGroupJoinRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.HandleGroupJoinResponse.deserializeBinary
);


/**
 * @param {!proto.chat.HandleGroupJoinRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.HandleGroupJoinResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.HandleGroupJoinResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.handleGroupJoinApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/HandleGroupJoinApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_HandleGroupJoinApplication,
      callback);
};


/**
 * @param {!proto.chat.HandleGroupJoinRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.HandleGroupJoinResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.handleGroupJoinApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/HandleGroupJoinApplication',
      request,
      metadata || {},
      methodDescriptor_ChatService_HandleGroupJoinApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.CreateGroupRequest,
 *   !proto.chat.CreateGroupResponse>}
 */
const methodDescriptor_ChatService_CreateGroup = new grpc.web.MethodDescriptor(
  '/chat.ChatService/CreateGroup',
  grpc.web.MethodType.UNARY,
  proto.chat.CreateGroupRequest,
  proto.chat.CreateGroupResponse,
  /**
   * @param {!proto.chat.CreateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.CreateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.chat.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.CreateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.CreateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.createGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateGroup,
      callback);
};


/**
 * @param {!proto.chat.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.CreateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.createGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.LoadMessagesRequest,
 *   !proto.chat.LoadMessagesResponse>}
 */
const methodDescriptor_ChatService_LoadMessages = new grpc.web.MethodDescriptor(
  '/chat.ChatService/LoadMessages',
  grpc.web.MethodType.UNARY,
  proto.chat.LoadMessagesRequest,
  proto.chat.LoadMessagesResponse,
  /**
   * @param {!proto.chat.LoadMessagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.LoadMessagesResponse.deserializeBinary
);


/**
 * @param {!proto.chat.LoadMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.LoadMessagesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.LoadMessagesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatServiceClient.prototype.loadMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.ChatService/LoadMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_LoadMessages,
      callback);
};


/**
 * @param {!proto.chat.LoadMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.LoadMessagesResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatServicePromiseClient.prototype.loadMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.ChatService/LoadMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_LoadMessages);
};


// module.exports = proto.chat;
export {
  proto
}

